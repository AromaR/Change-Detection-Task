{"ast":null,"code":"var _jsxFileName = \"/Users/alexdhima/react-quiz/src/components/Quiz.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport axios from 'axios';\nimport GameOver from './GameOver';\nimport Pic1A from '../image 1_P.jpg';\nimport Pic1B from '../Image 1_O.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuizWindow = styled.div`\n    text-align: center;\n    font-size: clamp(20px, 2.5vw, 24px);\n    margin-top: 30vh;\n`;\n_c = QuizWindow;\nconst Options = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 70%;\n    margin: 2em auto;\n\n    @media screen and (min-width: 1180px) {\n        width: 50%;\n    }\n`;\nconst Option = styled.button`\n    display: block;\n    border: 1px solid #616A94;\n    border-radius: 15px;\n    padding: 15px 30px;\n    text-decoration: none;\n    color: #616A94;\n    background-color: #161A31;\n    transition: 0.3s;\n    font-size: 1em;\n    outline: none;\n    user-select: none;\n    margin-top: 1em;\n    cursor: pointer;\n    \n    @media screen and (min-width: 1180px) {\n        &:hover {\n            color: white;\n            background-color: #616A94;\n        }\n    }\n`;\nconst Question = styled.div`\n    width: 70%;\n    margin: 0 auto;\n`;\n\nconst Quiz = () => {\n  _s();\n\n  const [quiz, setQuiz] = useState([]);\n  const [number, setNumber] = useState(0);\n  const [pts, setPts] = useState(0);\n\n  const shuffle = arr => arr.sort(() => Math.random() - 0.5);\n\n  const pickAnswer = e => {\n    //let userAnswer = e.target.outerText;\n    // if (quiz[number].answer === userAnswer) \n    setPts(pts + 1);\n    setNumber(number + 1);\n  };\n\n  useEffect(() => {// axios.get('https://opentdb.com/api.php?amount=5&category=18&difficulty=easy&type=multiple')\n    //     .then(res => {\n    //         setQuiz(res.data.results.map(item => (\n    //             {\n    //                 question: item.question,\n    //                 options: shuffle([...item.incorrect_answers, item.correct_answer]),\n    //                 answer: item.correct_answer\n    //             }\n    //         )));\n    //     })\n    //     .catch(err => console.error(err))\n  }, []);\n  return (\n    /*#__PURE__*/\n    // <QuizWindow>\n    //     { quiz[number] &&\n    //         <>\n    //             <Question dangerouslySetInnerHTML={{ __html: quiz[number].question }}></Question>\n    //             <Options>\n    //                 {quiz[number].options.map((item, index) => (\n    //                     <Option key={index} dangerouslySetInnerHTML={{ __html: item }} onClick={pickAnswer}></Option>\n    //                 ))}\n    //             </Options>\n    //         </>\n    //     }\n    //     {\n    //         number === 5 && <GameOver pts={pts} />\n    //     }\n    // </QuizWindow>\n    _jsxDEV(QuizWindow, {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: Pic1A,\n        alt: \"Picture 1A\",\n        onClick: pickAnswer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: Pic1B,\n        alt: \"Picture 1B\",\n        onClick: pickAnswer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }, this), number == 5 && /*#__PURE__*/_jsxDEV(GameOver, {\n        pts: pts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this)\n  );\n};\n\n_s(Quiz, \"64CWuc9FghbtbsoqP9+B/Zk+xSk=\");\n\n_c2 = Quiz;\nexport default Quiz;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"QuizWindow\");\n$RefreshReg$(_c2, \"Quiz\");","map":{"version":3,"sources":["/Users/alexdhima/react-quiz/src/components/Quiz.js"],"names":["React","useState","useEffect","styled","axios","GameOver","Pic1A","Pic1B","QuizWindow","div","Options","Option","button","Question","Quiz","quiz","setQuiz","number","setNumber","pts","setPts","shuffle","arr","sort","Math","random","pickAnswer","e"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;;AAKA,MAAMC,UAAU,GAAGL,MAAM,CAACM,GAAI;AAC9B;AACA;AACA;AACA,CAJA;KAAMD,U;AAMN,MAAME,OAAO,GAAGP,MAAM,CAACM,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATA;AAWA,MAAME,MAAM,GAAGR,MAAM,CAACS,MAAO;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CArBA;AAuBA,MAAMC,QAAQ,GAAGV,MAAM,CAACM,GAAI;AAC5B;AACA;AACA,CAHA;;AAKA,MAAMK,IAAI,GAAG,MAAM;AAAA;;AAEf,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBf,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACgB,MAAD,EAASC,SAAT,IAAsBjB,QAAQ,CAAC,CAAD,CAApC;AACA,QAAM,CAACkB,GAAD,EAAMC,MAAN,IAAgBnB,QAAQ,CAAC,CAAD,CAA9B;;AAEA,QAAMoB,OAAO,GAAIC,GAAD,IAASA,GAAG,CAACC,IAAJ,CAAS,MAAMC,IAAI,CAACC,MAAL,KAAgB,GAA/B,CAAzB;;AAEA,QAAMC,UAAU,GAAIC,CAAD,IAAO;AAEtB;AAEA;AACAP,IAAAA,MAAM,CAACD,GAAG,GAAG,CAAP,CAAN;AACAD,IAAAA,SAAS,CAACD,MAAM,GAAG,CAAV,CAAT;AACH,GAPD;;AASAf,EAAAA,SAAS,CAAC,MAAM,CAEZ;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGH,GAjBQ,EAiBN,EAjBM,CAAT;AAoBA;AAAA;AACI;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA,YAAC,UAAD;AAAA,8BACI;AAAK,QAAA,GAAG,EAAEI,KAAV;AAAiB,QAAA,GAAG,EAAC,YAArB;AAAkC,QAAA,OAAO,EAAEoB;AAA3C;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAK,QAAA,GAAG,EAAEnB,KAAV;AAAiB,QAAA,GAAG,EAAC,YAArB;AAAkC,QAAA,OAAO,EAAEmB;AAA3C;AAAA;AAAA;AAAA;AAAA,cAFJ,EAGMT,MAAM,IAAI,CAAV,iBAAe,QAAC,QAAD;AAAU,QAAA,GAAG,EAAIE;AAAjB;AAAA;AAAA;AAAA;AAAA,cAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAnBJ;AA0BH,CA/DD;;GAAML,I;;MAAAA,I;AAiEN,eAAeA,IAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport axios from 'axios'\nimport GameOver from './GameOver';\nimport Pic1A from '../image 1_P.jpg';\nimport Pic1B from '../Image 1_O.jpg';\n\n\n\n\nconst QuizWindow = styled.div`\n    text-align: center;\n    font-size: clamp(20px, 2.5vw, 24px);\n    margin-top: 30vh;\n`;\n\nconst Options = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 70%;\n    margin: 2em auto;\n\n    @media screen and (min-width: 1180px) {\n        width: 50%;\n    }\n`;\n\nconst Option = styled.button`\n    display: block;\n    border: 1px solid #616A94;\n    border-radius: 15px;\n    padding: 15px 30px;\n    text-decoration: none;\n    color: #616A94;\n    background-color: #161A31;\n    transition: 0.3s;\n    font-size: 1em;\n    outline: none;\n    user-select: none;\n    margin-top: 1em;\n    cursor: pointer;\n    \n    @media screen and (min-width: 1180px) {\n        &:hover {\n            color: white;\n            background-color: #616A94;\n        }\n    }\n`;\n\nconst Question = styled.div`\n    width: 70%;\n    margin: 0 auto;\n`;\n\nconst Quiz = () => {\n\n    const [quiz, setQuiz] = useState([]);\n    const [number, setNumber] = useState(0);\n    const [pts, setPts] = useState(0);\n\n    const shuffle = (arr) => arr.sort(() => Math.random() - 0.5);\n\n    const pickAnswer = (e) => {\n\n        //let userAnswer = e.target.outerText;\n\n        // if (quiz[number].answer === userAnswer) \n        setPts(pts + 1);\n        setNumber(number + 1);\n    }\n\n    useEffect(() => {\n\n        // axios.get('https://opentdb.com/api.php?amount=5&category=18&difficulty=easy&type=multiple')\n        //     .then(res => {\n        //         setQuiz(res.data.results.map(item => (\n\n        //             {\n        //                 question: item.question,\n        //                 options: shuffle([...item.incorrect_answers, item.correct_answer]),\n        //                 answer: item.correct_answer\n        //             }\n\n        //         )));\n        //     })\n        //     .catch(err => console.error(err))\n        \n\n    }, []);\n\n\n    return (\n        // <QuizWindow>\n        //     { quiz[number] &&\n\n        //         <>\n        //             <Question dangerouslySetInnerHTML={{ __html: quiz[number].question }}></Question>\n\n        //             <Options>\n        //                 {quiz[number].options.map((item, index) => (\n        //                     <Option key={index} dangerouslySetInnerHTML={{ __html: item }} onClick={pickAnswer}></Option>\n        //                 ))}\n        //             </Options>\n        //         </>\n\n        //     }\n        //     {\n        //         number === 5 && <GameOver pts={pts} />\n        //     }\n        // </QuizWindow>\n        <QuizWindow>\n            <img src={Pic1A} alt=\"Picture 1A\" onClick={pickAnswer} />\n            <img src={Pic1B} alt=\"Picture 1B\" onClick={pickAnswer}/>\n            { number == 5 && <GameOver pts = {pts} />}\n        </QuizWindow>\n        \n    )\n}\n\nexport default Quiz\n"]},"metadata":{},"sourceType":"module"}