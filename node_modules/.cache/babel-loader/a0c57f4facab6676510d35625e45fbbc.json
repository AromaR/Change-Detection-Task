{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aroma\\\\Documents\\\\PsychGit\\\\Change-Detection-Task\\\\src\\\\components\\\\CountdownTimer.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport DateTimeDisplay from './DateTimeDisplay';\nimport { useCountdown } from './hooks/useCountdown';\nimport { setShow1, setShowPause1 } from './Quiz';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExpiredNotice = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"expired-notice\",\n    id: \"expired-notice\",\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Time Over!!! Click Next to Continue.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ExpiredNotice;\n\nconst ShowCounter = (_ref) => {\n  let {\n    days,\n    hours,\n    minutes,\n    seconds,\n    ms\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"show-counter\",\n    children: /*#__PURE__*/_jsxDEV(\"h8\", {\n      children: [minutes, \":\", seconds]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = ShowCounter;\n\nconst CountdownTimer = (_ref2) => {\n  _s();\n\n  let {\n    targetDate\n  } = _ref2;\n  const [days, hours, minutes, seconds] = useCountdown(targetDate);\n\n  if (days + hours + minutes + seconds <= 0) {\n    return /*#__PURE__*/_jsxDEV(ExpiredNotice, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(ShowCounter, {\n      days: days,\n      hours: hours,\n      minutes: minutes,\n      seconds: seconds\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(CountdownTimer, \"k4nYSprLtbeXmgny6/HJFuVOyFU=\", false, function () {\n  return [useCountdown];\n});\n\n_c3 = CountdownTimer;\nexport default CountdownTimer;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ExpiredNotice\");\n$RefreshReg$(_c2, \"ShowCounter\");\n$RefreshReg$(_c3, \"CountdownTimer\");","map":{"version":3,"sources":["C:/Users/aroma/Documents/PsychGit/Change-Detection-Task/src/components/CountdownTimer.js"],"names":["React","DateTimeDisplay","useCountdown","setShow1","setShowPause1","ExpiredNotice","ShowCounter","days","hours","minutes","seconds","ms","CountdownTimer","targetDate"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,YAAT,QAA6B,sBAA7B;AACA,SAAQC,QAAR,EAAiBC,aAAjB,QAAqC,QAArC;;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAC1B,sBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAgC,IAAA,EAAE,EAAC,gBAAnC;AAAA,2BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAND;;KAAMA,a;;AAQN,MAAMC,WAAW,GAAG,UAA2C;AAAA,MAA1C;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA,OAAf;AAAwBC,IAAAA,OAAxB;AAAiCC,IAAAA;AAAjC,GAA0C;AAC7D,sBACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,2BACI;AAAA,iBAAKF,OAAL,OAAeC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAPD;;MAAMJ,W;;AASN,MAAMM,cAAc,GAAG,WAAoB;AAAA;;AAAA,MAAnB;AAAEC,IAAAA;AAAF,GAAmB;AACzC,QAAM,CAACN,IAAD,EAAOC,KAAP,EAAcC,OAAd,EAAuBC,OAAvB,IAAkCR,YAAY,CAACW,UAAD,CAApD;;AAEA,MAAIN,IAAI,GAAGC,KAAP,GAAeC,OAAf,GAAyBC,OAAzB,IAAmC,CAAvC,EAA0C;AACxC,wBAAO,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFD,MAEO;AACL,wBACE,QAAC,WAAD;AACE,MAAA,IAAI,EAAEH,IADR;AAEE,MAAA,KAAK,EAAEC,KAFT;AAGE,MAAA,OAAO,EAAEC,OAHX;AAIE,MAAA,OAAO,EAAEC;AAJX;AAAA;AAAA;AAAA;AAAA,YADF;AAQD;AACF,CAfD;;GAAME,c;UACoCV,Y;;;MADpCU,c;AAiBN,eAAeA,cAAf","sourcesContent":["import React from 'react';\r\nimport DateTimeDisplay from './DateTimeDisplay';\r\nimport { useCountdown } from './hooks/useCountdown';\r\nimport {setShow1,setShowPause1} from './Quiz';\r\n\r\nconst ExpiredNotice = () => {\r\n  return (\r\n    <div className=\"expired-notice\" id=\"expired-notice\">\r\n      <span>Time Over!!! Click Next to Continue.</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ShowCounter = ({ days, hours, minutes, seconds, ms }) => {\r\n  return (\r\n    <div className=\"show-counter\">\r\n        <h8>{minutes}:{seconds}</h8>\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nconst CountdownTimer = ({ targetDate }) => {\r\n  const [days, hours, minutes, seconds] = useCountdown(targetDate);\r\n\r\n  if (days + hours + minutes + seconds<= 0) {\r\n    return <ExpiredNotice/>;\r\n  } else {\r\n    return (\r\n      <ShowCounter\r\n        days={days}\r\n        hours={hours}\r\n        minutes={minutes}\r\n        seconds={seconds}\r\n      />\r\n    );\r\n  }\r\n};\r\n\r\nexport default CountdownTimer;\r\n"]},"metadata":{},"sourceType":"module"}